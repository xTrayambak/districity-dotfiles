#+TITLE: Tray's Emacs
#+AUTHOR: xTrayambak (stolen from justinlime)
#+DESCRIPTION: Tray's Emacs
#+PROPERTY: header-args :tangle yes
#+STARTUP: showeverything
#+OPTIONS: toc:2


* TABLE OF CONTENTS :toc:
- [[#general][General]]
  - [[#package-manger][Package Manger]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-binds][General Binds]]
  - [[#keychord-binds][Keychord Binds]]
- [[#packages][Packages]]
  - [[#which-key][Which Key]]
- [[#look--feel][Look & Feel]]
  - [[#theme][Theme]]
  - [[#gui][GUI]]
  - [[#modeline][Modeline]]
  - [[#fonts][Fonts]]
  - [[#dashboard][Dashboard]]
- [[#lspcompletion][LSP/Completion]]
  - [[#eglot][Eglot]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#yasnippet][Yasnippet]]
- [[#treesitter-auto][Treesitter-auto]]
- [[#neotree][Neotree]]
- [[#fzf][FZF]]
- [[#magit][Magit]]
- [[#org-mode][Org Mode]]
  - [[#org-general][Org General]]
  - [[#org-table-of-contents][Org Table of Contents]]
  - [[#org-modern][Org Modern]]
- [[#languages-and-modes][Languages and Modes]]
  - [[#python-mode][Python Mode]]
- [[#misc][Misc]]
  - [[#backup-files][Backup Files]]
  - [[#other-settings][Other Settings]]
  - [[#custom-functions][Custom Functions]]

* General
** Package Manger
#+begin_src emacs-lisp 
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)


;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-width 4)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)
#+end_src

** General Binds
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; Corfu mode
  (general-define-key
    :keymaps 'corfu-map
    "<tab>" 'corfu-next
    "<backtab>" 'corfu-previous
  )
  ;; Org
  (general-define-key
    :states 'normal 
    :keymaps 'org-mode-map
    "<tab>" #'org-cycle
  )
  ;; Evil
  (general-define-key
    :keymaps 'evil-insert-state-map
    "TAB" 'tab-to-tab-stop
  )
  (general-define-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    "C-u" 'evil-scroll-up
    "C-d" 'evil-scroll-down
  )
  ;; set up 'SPC' as the global leader key
  (general-create-definer leader
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (leader
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "TEST5")
    "bi" '(ibuffer :wk "IBuffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "br" '(revert-buffer :wk "Reload buffer"))
  (leader
    "e" '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")) 
  (leader
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable"))
  (leader
    "d" '(:ignore t :wk "Help")
    "d t" '(neotree-toggle :wk "Describe function"))
  (leader
    "f" '(:ignore t :wk "Help")
    "f f" '(find-file :wk "Find file"))
  (leader
    "c" '(:ignore t :wk "Help")
    "c r" '(comment-region :wk "Find file")
    "c l" '(comment-line :wk "Find file"))
  (leader
    "s" '(:ignore t :wk "Help")
    "s u" '(ssh-user :wk "SSH as user")
    "s r" '(ssh-root :wk "SSH as user with root privledges"))
  )
#+end_src

** Keychord Binds
#+begin_src emacs-lisp
(use-package key-chord
  :init
  (key-chord-mode 1)
  :config
  ;; (setq key-chord-two-keys-delay 0.2)
  (key-chord-define evil-insert-state-map  "jj" 'evil-normal-state))
#+end_src 

* Packages
** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
		which-key-sort-order #'which-key-key-order-alpha
		which-key-sort-uppercase-first nil
		which-key-add-column-padding 1
		which-key-max-display-columns nil
		which-key-min-display-lines 6
		which-key-side-window-slot -10
		which-key-side-window-max-height 0.25
		which-key-idle-delay 0.8
		which-key-max-description-length 25
		which-key-allow-imprecise-window-fit t
		which-key-separator " -> " ))

#+end_src
* Look & Feel
** Theme
#+begin_src emacs-lisp
;; (use-package catppuccin-theme
;;   :init
;;   (setq catppuccin-flavor 'frappe)
;;   (load-theme 'catppuccin :no-confirm))
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nord t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(set-frame-parameter nil 'alpha-background 70)
#+end_src
** GUI
#+begin_src emacs-lisp
(setq use-dialog-box nil) ; No dialog box
(menu-bar-mode -1) ;;Disable menu
(tool-bar-mode -1) ;;Disable toolbar
(scroll-bar-mode -1) ;;Disable scroll bar
(global-display-line-numbers-mode 1) ;;Display line numbers
(setq-default truncate-lines t) ;; Allow truncated lines
(pixel-scroll-precision-mode 1) ;;Smooth scrolling
(setq mouse-wheel-progressive-speed nil) 
(setq scroll-conservatively 101)
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Fonts
#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "RobotoMono Nerd Font"))
(use-package all-the-icons
  :if (display-graphic-p))
(set-face-attribute 'default nil
  :font "RobotoMono Nerd Font"
  :height 130
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "RobotoMono Nerd Font"
  :height 130
  :weight 'medium)
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
(set-language-environment "UTF-8")
#+end_src
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :elpaca t
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) ;; Start dashboard for emacs clients
  ;; (setq dashboard-startup-banner "~/.config/emacs/eyecropped.png")
  (setq dashboard-banner-logo-title "In Nim we believe!")
  (setq dashboard-footer-messages '("sudo systemctl restart tray"))
  (dashboard-setup-startup-hook))
#+end_src
* LSP/Completion
** Eglot
#+begin_src emacs-lisp
(require 'eglot)
(add-to-list 'eglot-server-programs '(nim-mode . ("nimlangserver")))
(use-package eglot)
  :demand t
  (add-hook 'c-mode-hook #'eglot-ensure)
  (add-hook 'cpp-mode-hook #'eglot-ensure)
  (add-hook 'nim-mode-hook #'eglot-ensure)

(defun silence-eglot (orig-fun &rest args)
  (let ((inhibit-message t))
    (funcall orig-fun args))
(advice-add 'eglot--message :around #'silence-eglot)
;; (add-hook 'go-mode-hook #'eglot)
#+end_src
** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :bind nil
  :custom
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 2)
  :init
  (global-corfu-mode)
  (corfu-history-mode))
#+end_src
** Cape
#+begin_src emacs-lisp
(use-package cape
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  ;; (setq yas-snippet-dirs '("~/.config/emacs/snips"))
  (yas-global-mode 1))
#+end_src
* Treesitter-auto
#+begin_src emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'")
(use-package nix-mode
  :mode "\\.nix\\'")
(use-package go-mode
  :mode "\\.go\\'")
(use-package nim-mode
  :mode "\\.nim\\'")

(use-package treesit-auto
  :ensure t
  :config
  (global-treesit-auto-mode)
  (setq treesit-auto-install 'prompt)
  (setq my-nix-ts-mode ;;this shit doesnt work :(
    (make-treesit-auto-recipe
      :lang 'nix
      :ts-mode 'nix-ts-mode
      :remap 'nix-mode
      :url "https://github.com/nix-community/tree-sitter-nix"
      :revision "master"
      :source-dir "src"))
  (add-to-list 'treesit-auto-recipe-list my-nix-ts-mode))
#+end_src

* Neotree
#+begin_src emacs-lisp
(use-package neotree)
#+end_src
* FZF
#+begin_src emacs-lisp
(use-package fzf
  :bind
    ;; Don't forget to set keybinds!
  :config
  (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))
#+end_src
* Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
* Org Mode
** Org General
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-src-preserve-indentation t)
(electric-indent-mode -1)
#+end_src
** Org Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Org Modern
#+begin_src emacs-lisp
(use-package org-modern
  :init 
  (with-eval-after-load 'org (global-org-modern-mode)))
#+end_src
* Languages and Modes
** Python Mode
#+begin_src emacs-lisp
(add-hook 'python-mode-hook '(lambda () (setq tab-width 4)))
(add-hook 'python-ts-mode-hook '(lambda () (setq tab-width 4)))
#+end_src
* Misc
** Backup Files
#+begin_src emacs-lisp
(setq make-backup-files nil) ;; stop creating ~ files
(setq auto-save-default nil) ;; Disable autosave # files
(setq create-lockfiles nil) ; Disable .# files
#+end_src
** Other Settings
#+begin_src emacs-lisp
(electric-pair-mode 1) ; Auto closing pairs like () and {}
(setq use-short-answers t) ; Set y or n instead of yes or no for questions
(setq inhibit-startup-messages t) ;; Disable splash screen
(save-place-mode) ; Save cursor position in buffer on reopen
(setq-default tab-width 2) 
(setq-default indent-tabs-mode nil)
(setq-default indent-line-function 'insert-tab)
(setq password-cache-expiry nil)
#+end_src
** Custom Functions
z#+begin_src emacs-lisp
(defun ssh-root (host)
  "SSH with sudo privledges using a host from .ssh/config"
  (interactive "sEnter host: ")
  (let ((format-host (format "/ssh:%s|sudo:%s:/" host host)))
    (find-file format-host)
  )
)

(defun ssh-user (host)
  "SSH using a host from .ssh/config"
  (interactive "sEnter host: ")
  (let ((format-host (format "/ssh:%s:~" host)))
    (find-file format-host)
  )
)

#+end_src
